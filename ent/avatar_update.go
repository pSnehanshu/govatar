// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/pSnehanshu/govatar/ent/avatar"
	"github.com/pSnehanshu/govatar/ent/email"
	"github.com/pSnehanshu/govatar/ent/predicate"
)

// AvatarUpdate is the builder for updating Avatar entities.
type AvatarUpdate struct {
	config
	hooks    []Hook
	mutation *AvatarMutation
}

// Where appends a list predicates to the AvatarUpdate builder.
func (au *AvatarUpdate) Where(ps ...predicate.Avatar) *AvatarUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AvatarUpdate) SetCreatedAt(t time.Time) *AvatarUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AvatarUpdate) SetNillableCreatedAt(t *time.Time) *AvatarUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetLoc sets the "loc" field.
func (au *AvatarUpdate) SetLoc(s string) *AvatarUpdate {
	au.mutation.SetLoc(s)
	return au
}

// SetNillableLoc sets the "loc" field if the given value is not nil.
func (au *AvatarUpdate) SetNillableLoc(s *string) *AvatarUpdate {
	if s != nil {
		au.SetLoc(*s)
	}
	return au
}

// SetRating sets the "rating" field.
func (au *AvatarUpdate) SetRating(a avatar.Rating) *AvatarUpdate {
	au.mutation.SetRating(a)
	return au
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (au *AvatarUpdate) SetNillableRating(a *avatar.Rating) *AvatarUpdate {
	if a != nil {
		au.SetRating(*a)
	}
	return au
}

// SetEmailID sets the "email_id" field.
func (au *AvatarUpdate) SetEmailID(u uuid.UUID) *AvatarUpdate {
	au.mutation.SetEmailID(u)
	return au
}

// SetNillableEmailID sets the "email_id" field if the given value is not nil.
func (au *AvatarUpdate) SetNillableEmailID(u *uuid.UUID) *AvatarUpdate {
	if u != nil {
		au.SetEmailID(*u)
	}
	return au
}

// SetEmail sets the "email" edge to the Email entity.
func (au *AvatarUpdate) SetEmail(e *Email) *AvatarUpdate {
	return au.SetEmailID(e.ID)
}

// Mutation returns the AvatarMutation object of the builder.
func (au *AvatarUpdate) Mutation() *AvatarMutation {
	return au.mutation
}

// ClearEmail clears the "email" edge to the Email entity.
func (au *AvatarUpdate) ClearEmail() *AvatarUpdate {
	au.mutation.ClearEmail()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AvatarUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AvatarUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AvatarUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AvatarUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AvatarUpdate) check() error {
	if v, ok := au.mutation.Rating(); ok {
		if err := avatar.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Avatar.rating": %w`, err)}
		}
	}
	if _, ok := au.mutation.EmailID(); au.mutation.EmailCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Avatar.email"`)
	}
	return nil
}

func (au *AvatarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(avatar.Table, avatar.Columns, sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(avatar.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Loc(); ok {
		_spec.SetField(avatar.FieldLoc, field.TypeString, value)
	}
	if value, ok := au.mutation.Rating(); ok {
		_spec.SetField(avatar.FieldRating, field.TypeEnum, value)
	}
	if au.mutation.EmailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   avatar.EmailTable,
			Columns: []string{avatar.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   avatar.EmailTable,
			Columns: []string{avatar.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{avatar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AvatarUpdateOne is the builder for updating a single Avatar entity.
type AvatarUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AvatarMutation
}

// SetCreatedAt sets the "created_at" field.
func (auo *AvatarUpdateOne) SetCreatedAt(t time.Time) *AvatarUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AvatarUpdateOne) SetNillableCreatedAt(t *time.Time) *AvatarUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetLoc sets the "loc" field.
func (auo *AvatarUpdateOne) SetLoc(s string) *AvatarUpdateOne {
	auo.mutation.SetLoc(s)
	return auo
}

// SetNillableLoc sets the "loc" field if the given value is not nil.
func (auo *AvatarUpdateOne) SetNillableLoc(s *string) *AvatarUpdateOne {
	if s != nil {
		auo.SetLoc(*s)
	}
	return auo
}

// SetRating sets the "rating" field.
func (auo *AvatarUpdateOne) SetRating(a avatar.Rating) *AvatarUpdateOne {
	auo.mutation.SetRating(a)
	return auo
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (auo *AvatarUpdateOne) SetNillableRating(a *avatar.Rating) *AvatarUpdateOne {
	if a != nil {
		auo.SetRating(*a)
	}
	return auo
}

// SetEmailID sets the "email_id" field.
func (auo *AvatarUpdateOne) SetEmailID(u uuid.UUID) *AvatarUpdateOne {
	auo.mutation.SetEmailID(u)
	return auo
}

// SetNillableEmailID sets the "email_id" field if the given value is not nil.
func (auo *AvatarUpdateOne) SetNillableEmailID(u *uuid.UUID) *AvatarUpdateOne {
	if u != nil {
		auo.SetEmailID(*u)
	}
	return auo
}

// SetEmail sets the "email" edge to the Email entity.
func (auo *AvatarUpdateOne) SetEmail(e *Email) *AvatarUpdateOne {
	return auo.SetEmailID(e.ID)
}

// Mutation returns the AvatarMutation object of the builder.
func (auo *AvatarUpdateOne) Mutation() *AvatarMutation {
	return auo.mutation
}

// ClearEmail clears the "email" edge to the Email entity.
func (auo *AvatarUpdateOne) ClearEmail() *AvatarUpdateOne {
	auo.mutation.ClearEmail()
	return auo
}

// Where appends a list predicates to the AvatarUpdate builder.
func (auo *AvatarUpdateOne) Where(ps ...predicate.Avatar) *AvatarUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AvatarUpdateOne) Select(field string, fields ...string) *AvatarUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Avatar entity.
func (auo *AvatarUpdateOne) Save(ctx context.Context) (*Avatar, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AvatarUpdateOne) SaveX(ctx context.Context) *Avatar {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AvatarUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AvatarUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AvatarUpdateOne) check() error {
	if v, ok := auo.mutation.Rating(); ok {
		if err := avatar.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Avatar.rating": %w`, err)}
		}
	}
	if _, ok := auo.mutation.EmailID(); auo.mutation.EmailCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Avatar.email"`)
	}
	return nil
}

func (auo *AvatarUpdateOne) sqlSave(ctx context.Context) (_node *Avatar, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(avatar.Table, avatar.Columns, sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Avatar.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, avatar.FieldID)
		for _, f := range fields {
			if !avatar.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != avatar.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(avatar.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Loc(); ok {
		_spec.SetField(avatar.FieldLoc, field.TypeString, value)
	}
	if value, ok := auo.mutation.Rating(); ok {
		_spec.SetField(avatar.FieldRating, field.TypeEnum, value)
	}
	if auo.mutation.EmailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   avatar.EmailTable,
			Columns: []string{avatar.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   avatar.EmailTable,
			Columns: []string{avatar.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Avatar{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{avatar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
