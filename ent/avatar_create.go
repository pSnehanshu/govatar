// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/pSnehanshu/govatar/ent/avatar"
	"github.com/pSnehanshu/govatar/ent/email"
)

// AvatarCreate is the builder for creating a Avatar entity.
type AvatarCreate struct {
	config
	mutation *AvatarMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AvatarCreate) SetCreatedAt(t time.Time) *AvatarCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AvatarCreate) SetNillableCreatedAt(t *time.Time) *AvatarCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetLoc sets the "loc" field.
func (ac *AvatarCreate) SetLoc(s string) *AvatarCreate {
	ac.mutation.SetLoc(s)
	return ac
}

// SetRating sets the "rating" field.
func (ac *AvatarCreate) SetRating(a avatar.Rating) *AvatarCreate {
	ac.mutation.SetRating(a)
	return ac
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (ac *AvatarCreate) SetNillableRating(a *avatar.Rating) *AvatarCreate {
	if a != nil {
		ac.SetRating(*a)
	}
	return ac
}

// SetEmailID sets the "email_id" field.
func (ac *AvatarCreate) SetEmailID(u uuid.UUID) *AvatarCreate {
	ac.mutation.SetEmailID(u)
	return ac
}

// SetID sets the "id" field.
func (ac *AvatarCreate) SetID(u uuid.UUID) *AvatarCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AvatarCreate) SetNillableID(u *uuid.UUID) *AvatarCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// SetEmail sets the "email" edge to the Email entity.
func (ac *AvatarCreate) SetEmail(e *Email) *AvatarCreate {
	return ac.SetEmailID(e.ID)
}

// Mutation returns the AvatarMutation object of the builder.
func (ac *AvatarCreate) Mutation() *AvatarMutation {
	return ac.mutation
}

// Save creates the Avatar in the database.
func (ac *AvatarCreate) Save(ctx context.Context) (*Avatar, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AvatarCreate) SaveX(ctx context.Context) *Avatar {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AvatarCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AvatarCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AvatarCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := avatar.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.Rating(); !ok {
		v := avatar.DefaultRating
		ac.mutation.SetRating(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := avatar.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AvatarCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Avatar.created_at"`)}
	}
	if _, ok := ac.mutation.Loc(); !ok {
		return &ValidationError{Name: "loc", err: errors.New(`ent: missing required field "Avatar.loc"`)}
	}
	if _, ok := ac.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "Avatar.rating"`)}
	}
	if v, ok := ac.mutation.Rating(); ok {
		if err := avatar.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Avatar.rating": %w`, err)}
		}
	}
	if _, ok := ac.mutation.EmailID(); !ok {
		return &ValidationError{Name: "email_id", err: errors.New(`ent: missing required field "Avatar.email_id"`)}
	}
	if _, ok := ac.mutation.EmailID(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required edge "Avatar.email"`)}
	}
	return nil
}

func (ac *AvatarCreate) sqlSave(ctx context.Context) (*Avatar, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AvatarCreate) createSpec() (*Avatar, *sqlgraph.CreateSpec) {
	var (
		_node = &Avatar{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(avatar.Table, sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeUUID))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(avatar.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.Loc(); ok {
		_spec.SetField(avatar.FieldLoc, field.TypeString, value)
		_node.Loc = value
	}
	if value, ok := ac.mutation.Rating(); ok {
		_spec.SetField(avatar.FieldRating, field.TypeEnum, value)
		_node.Rating = value
	}
	if nodes := ac.mutation.EmailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   avatar.EmailTable,
			Columns: []string{avatar.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmailID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AvatarCreateBulk is the builder for creating many Avatar entities in bulk.
type AvatarCreateBulk struct {
	config
	err      error
	builders []*AvatarCreate
}

// Save creates the Avatar entities in the database.
func (acb *AvatarCreateBulk) Save(ctx context.Context) ([]*Avatar, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Avatar, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AvatarMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AvatarCreateBulk) SaveX(ctx context.Context) []*Avatar {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AvatarCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AvatarCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
