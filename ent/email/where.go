// Code generated by ent, DO NOT EDIT.

package email

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/pSnehanshu/govatar/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Email {
	return predicate.Email(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Email {
	return predicate.Email(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Email {
	return predicate.Email(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Email {
	return predicate.Email(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Email {
	return predicate.Email(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Email {
	return predicate.Email(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldEmail, v))
}

// IsVerified applies equality check predicate on the "is_verified" field. It's identical to IsVerifiedEQ.
func IsVerified(v bool) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldIsVerified, v))
}

// Shasum applies equality check predicate on the "shasum" field. It's identical to ShasumEQ.
func Shasum(v string) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldShasum, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldCreatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldUserID, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Email {
	return predicate.Email(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Email {
	return predicate.Email(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Email {
	return predicate.Email(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Email {
	return predicate.Email(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Email {
	return predicate.Email(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Email {
	return predicate.Email(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Email {
	return predicate.Email(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Email {
	return predicate.Email(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Email {
	return predicate.Email(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Email {
	return predicate.Email(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Email {
	return predicate.Email(sql.FieldContainsFold(FieldEmail, v))
}

// IsVerifiedEQ applies the EQ predicate on the "is_verified" field.
func IsVerifiedEQ(v bool) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldIsVerified, v))
}

// IsVerifiedNEQ applies the NEQ predicate on the "is_verified" field.
func IsVerifiedNEQ(v bool) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldIsVerified, v))
}

// ShasumEQ applies the EQ predicate on the "shasum" field.
func ShasumEQ(v string) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldShasum, v))
}

// ShasumNEQ applies the NEQ predicate on the "shasum" field.
func ShasumNEQ(v string) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldShasum, v))
}

// ShasumIn applies the In predicate on the "shasum" field.
func ShasumIn(vs ...string) predicate.Email {
	return predicate.Email(sql.FieldIn(FieldShasum, vs...))
}

// ShasumNotIn applies the NotIn predicate on the "shasum" field.
func ShasumNotIn(vs ...string) predicate.Email {
	return predicate.Email(sql.FieldNotIn(FieldShasum, vs...))
}

// ShasumGT applies the GT predicate on the "shasum" field.
func ShasumGT(v string) predicate.Email {
	return predicate.Email(sql.FieldGT(FieldShasum, v))
}

// ShasumGTE applies the GTE predicate on the "shasum" field.
func ShasumGTE(v string) predicate.Email {
	return predicate.Email(sql.FieldGTE(FieldShasum, v))
}

// ShasumLT applies the LT predicate on the "shasum" field.
func ShasumLT(v string) predicate.Email {
	return predicate.Email(sql.FieldLT(FieldShasum, v))
}

// ShasumLTE applies the LTE predicate on the "shasum" field.
func ShasumLTE(v string) predicate.Email {
	return predicate.Email(sql.FieldLTE(FieldShasum, v))
}

// ShasumContains applies the Contains predicate on the "shasum" field.
func ShasumContains(v string) predicate.Email {
	return predicate.Email(sql.FieldContains(FieldShasum, v))
}

// ShasumHasPrefix applies the HasPrefix predicate on the "shasum" field.
func ShasumHasPrefix(v string) predicate.Email {
	return predicate.Email(sql.FieldHasPrefix(FieldShasum, v))
}

// ShasumHasSuffix applies the HasSuffix predicate on the "shasum" field.
func ShasumHasSuffix(v string) predicate.Email {
	return predicate.Email(sql.FieldHasSuffix(FieldShasum, v))
}

// ShasumEqualFold applies the EqualFold predicate on the "shasum" field.
func ShasumEqualFold(v string) predicate.Email {
	return predicate.Email(sql.FieldEqualFold(FieldShasum, v))
}

// ShasumContainsFold applies the ContainsFold predicate on the "shasum" field.
func ShasumContainsFold(v string) predicate.Email {
	return predicate.Email(sql.FieldContainsFold(FieldShasum, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Email {
	return predicate.Email(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Email {
	return predicate.Email(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Email {
	return predicate.Email(sql.FieldLTE(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Email {
	return predicate.Email(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Email {
	return predicate.Email(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Email {
	return predicate.Email(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Email {
	return predicate.Email(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Email {
	return predicate.Email(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Email {
	return predicate.Email(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Email {
	return predicate.Email(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Email {
	return predicate.Email(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Email {
	return predicate.Email(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Email {
	return predicate.Email(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Email {
	return predicate.Email(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Email {
	return predicate.Email(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Email {
	return predicate.Email(sql.FieldContainsFold(FieldUserID, v))
}

// HasAvatar applies the HasEdge predicate on the "avatar" edge.
func HasAvatar() predicate.Email {
	return predicate.Email(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AvatarTable, AvatarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAvatarWith applies the HasEdge predicate on the "avatar" edge with a given conditions (other predicates).
func HasAvatarWith(preds ...predicate.Avatar) predicate.Email {
	return predicate.Email(func(s *sql.Selector) {
		step := newAvatarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Email {
	return predicate.Email(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Email {
	return predicate.Email(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Email) predicate.Email {
	return predicate.Email(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Email) predicate.Email {
	return predicate.Email(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Email) predicate.Email {
	return predicate.Email(sql.NotPredicates(p))
}
