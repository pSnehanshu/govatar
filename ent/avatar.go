// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/pSnehanshu/govatar/ent/avatar"
	"github.com/pSnehanshu/govatar/ent/email"
)

// Avatar is the model entity for the Avatar schema.
type Avatar struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Loc holds the value of the "loc" field.
	Loc string `json:"loc,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating avatar.Rating `json:"rating,omitempty"`
	// EmailID holds the value of the "email_id" field.
	EmailID uuid.UUID `json:"email_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AvatarQuery when eager-loading is set.
	Edges        AvatarEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AvatarEdges holds the relations/edges for other nodes in the graph.
type AvatarEdges struct {
	// Email holds the value of the email edge.
	Email *Email `json:"email,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EmailOrErr returns the Email value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AvatarEdges) EmailOrErr() (*Email, error) {
	if e.Email != nil {
		return e.Email, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: email.Label}
	}
	return nil, &NotLoadedError{edge: "email"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Avatar) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case avatar.FieldLoc, avatar.FieldRating:
			values[i] = new(sql.NullString)
		case avatar.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case avatar.FieldID, avatar.FieldEmailID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Avatar fields.
func (a *Avatar) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case avatar.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case avatar.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case avatar.FieldLoc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field loc", values[i])
			} else if value.Valid {
				a.Loc = value.String
			}
		case avatar.FieldRating:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				a.Rating = avatar.Rating(value.String)
			}
		case avatar.FieldEmailID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field email_id", values[i])
			} else if value != nil {
				a.EmailID = *value
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Avatar.
// This includes values selected through modifiers, order, etc.
func (a *Avatar) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryEmail queries the "email" edge of the Avatar entity.
func (a *Avatar) QueryEmail() *EmailQuery {
	return NewAvatarClient(a.config).QueryEmail(a)
}

// Update returns a builder for updating this Avatar.
// Note that you need to call Avatar.Unwrap() before calling this method if this Avatar
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Avatar) Update() *AvatarUpdateOne {
	return NewAvatarClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Avatar entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Avatar) Unwrap() *Avatar {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Avatar is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Avatar) String() string {
	var builder strings.Builder
	builder.WriteString("Avatar(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("loc=")
	builder.WriteString(a.Loc)
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", a.Rating))
	builder.WriteString(", ")
	builder.WriteString("email_id=")
	builder.WriteString(fmt.Sprintf("%v", a.EmailID))
	builder.WriteByte(')')
	return builder.String()
}

// Avatars is a parsable slice of Avatar.
type Avatars []*Avatar
