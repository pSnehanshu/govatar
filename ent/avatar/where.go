// Code generated by ent, DO NOT EDIT.

package avatar

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/pSnehanshu/govatar/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Avatar {
	return predicate.Avatar(sql.FieldEQ(FieldCreatedAt, v))
}

// Loc applies equality check predicate on the "loc" field. It's identical to LocEQ.
func Loc(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldEQ(FieldLoc, v))
}

// EmailID applies equality check predicate on the "email_id" field. It's identical to EmailIDEQ.
func EmailID(v uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldEQ(FieldEmailID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Avatar {
	return predicate.Avatar(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Avatar {
	return predicate.Avatar(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Avatar {
	return predicate.Avatar(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Avatar {
	return predicate.Avatar(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Avatar {
	return predicate.Avatar(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Avatar {
	return predicate.Avatar(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Avatar {
	return predicate.Avatar(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Avatar {
	return predicate.Avatar(sql.FieldLTE(FieldCreatedAt, v))
}

// LocEQ applies the EQ predicate on the "loc" field.
func LocEQ(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldEQ(FieldLoc, v))
}

// LocNEQ applies the NEQ predicate on the "loc" field.
func LocNEQ(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldNEQ(FieldLoc, v))
}

// LocIn applies the In predicate on the "loc" field.
func LocIn(vs ...string) predicate.Avatar {
	return predicate.Avatar(sql.FieldIn(FieldLoc, vs...))
}

// LocNotIn applies the NotIn predicate on the "loc" field.
func LocNotIn(vs ...string) predicate.Avatar {
	return predicate.Avatar(sql.FieldNotIn(FieldLoc, vs...))
}

// LocGT applies the GT predicate on the "loc" field.
func LocGT(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldGT(FieldLoc, v))
}

// LocGTE applies the GTE predicate on the "loc" field.
func LocGTE(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldGTE(FieldLoc, v))
}

// LocLT applies the LT predicate on the "loc" field.
func LocLT(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldLT(FieldLoc, v))
}

// LocLTE applies the LTE predicate on the "loc" field.
func LocLTE(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldLTE(FieldLoc, v))
}

// LocContains applies the Contains predicate on the "loc" field.
func LocContains(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldContains(FieldLoc, v))
}

// LocHasPrefix applies the HasPrefix predicate on the "loc" field.
func LocHasPrefix(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldHasPrefix(FieldLoc, v))
}

// LocHasSuffix applies the HasSuffix predicate on the "loc" field.
func LocHasSuffix(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldHasSuffix(FieldLoc, v))
}

// LocEqualFold applies the EqualFold predicate on the "loc" field.
func LocEqualFold(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldEqualFold(FieldLoc, v))
}

// LocContainsFold applies the ContainsFold predicate on the "loc" field.
func LocContainsFold(v string) predicate.Avatar {
	return predicate.Avatar(sql.FieldContainsFold(FieldLoc, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v Rating) predicate.Avatar {
	return predicate.Avatar(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v Rating) predicate.Avatar {
	return predicate.Avatar(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...Rating) predicate.Avatar {
	return predicate.Avatar(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...Rating) predicate.Avatar {
	return predicate.Avatar(sql.FieldNotIn(FieldRating, vs...))
}

// EmailIDEQ applies the EQ predicate on the "email_id" field.
func EmailIDEQ(v uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "email_id" field.
func EmailIDNEQ(v uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "email_id" field.
func EmailIDIn(vs ...uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "email_id" field.
func EmailIDNotIn(vs ...uuid.UUID) predicate.Avatar {
	return predicate.Avatar(sql.FieldNotIn(FieldEmailID, vs...))
}

// HasEmail applies the HasEdge predicate on the "email" edge.
func HasEmail() predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EmailTable, EmailColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmailWith applies the HasEdge predicate on the "email" edge with a given conditions (other predicates).
func HasEmailWith(preds ...predicate.Email) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		step := newEmailStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Avatar) predicate.Avatar {
	return predicate.Avatar(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Avatar) predicate.Avatar {
	return predicate.Avatar(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Avatar) predicate.Avatar {
	return predicate.Avatar(sql.NotPredicates(p))
}
